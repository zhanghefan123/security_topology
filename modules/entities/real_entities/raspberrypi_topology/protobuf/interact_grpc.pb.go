// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: protobuf/interact.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Interact_SetAddr_FullMethodName        = "/protobuf.Interact/SetAddr"
	Interact_AddRoute_FullMethodName       = "/protobuf.Interact/AddRoute"
	Interact_TransmitFile_FullMethodName   = "/protobuf.Interact/TransmitFile"
	Interact_SetEnv_FullMethodName         = "/protobuf.Interact/SetEnv"
	Interact_LoadKernelInfo_FullMethodName = "/protobuf.Interact/LoadKernelInfo"
)

// InteractClient is the client API for Interact service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type InteractClient interface {
	// SayHello 方法
	SetAddr(ctx context.Context, in *SetAddrRequest, opts ...grpc.CallOption) (*NormalResponse, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*NormalResponse, error)
	TransmitFile(ctx context.Context, in *TransmitFileRequest, opts ...grpc.CallOption) (*NormalResponse, error)
	SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*NormalResponse, error)
	LoadKernelInfo(ctx context.Context, in *LoadKernelInfoRequest, opts ...grpc.CallOption) (*NormalResponse, error)
}

type interactClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractClient(cc grpc.ClientConnInterface) InteractClient {
	return &interactClient{cc}
}

func (c *interactClient) SetAddr(ctx context.Context, in *SetAddrRequest, opts ...grpc.CallOption) (*NormalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalResponse)
	err := c.cc.Invoke(ctx, Interact_SetAddr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*NormalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalResponse)
	err := c.cc.Invoke(ctx, Interact_AddRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactClient) TransmitFile(ctx context.Context, in *TransmitFileRequest, opts ...grpc.CallOption) (*NormalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalResponse)
	err := c.cc.Invoke(ctx, Interact_TransmitFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactClient) SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*NormalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalResponse)
	err := c.cc.Invoke(ctx, Interact_SetEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactClient) LoadKernelInfo(ctx context.Context, in *LoadKernelInfoRequest, opts ...grpc.CallOption) (*NormalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalResponse)
	err := c.cc.Invoke(ctx, Interact_LoadKernelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractServer is the server API for Interact service.
// All implementations must embed UnimplementedInteractServer
// for forward compatibility.
//
// 定义服务
type InteractServer interface {
	// SayHello 方法
	SetAddr(context.Context, *SetAddrRequest) (*NormalResponse, error)
	AddRoute(context.Context, *AddRouteRequest) (*NormalResponse, error)
	TransmitFile(context.Context, *TransmitFileRequest) (*NormalResponse, error)
	SetEnv(context.Context, *SetEnvRequest) (*NormalResponse, error)
	LoadKernelInfo(context.Context, *LoadKernelInfoRequest) (*NormalResponse, error)
	mustEmbedUnimplementedInteractServer()
}

// UnimplementedInteractServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractServer struct{}

func (UnimplementedInteractServer) SetAddr(context.Context, *SetAddrRequest) (*NormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAddr not implemented")
}
func (UnimplementedInteractServer) AddRoute(context.Context, *AddRouteRequest) (*NormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedInteractServer) TransmitFile(context.Context, *TransmitFileRequest) (*NormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitFile not implemented")
}
func (UnimplementedInteractServer) SetEnv(context.Context, *SetEnvRequest) (*NormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedInteractServer) LoadKernelInfo(context.Context, *LoadKernelInfoRequest) (*NormalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadKernelInfo not implemented")
}
func (UnimplementedInteractServer) mustEmbedUnimplementedInteractServer() {}
func (UnimplementedInteractServer) testEmbeddedByValue()                  {}

// UnsafeInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractServer will
// result in compilation errors.
type UnsafeInteractServer interface {
	mustEmbedUnimplementedInteractServer()
}

func RegisterInteractServer(s grpc.ServiceRegistrar, srv InteractServer) {
	// If the following call pancis, it indicates UnimplementedInteractServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Interact_ServiceDesc, srv)
}

func _Interact_SetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).SetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interact_SetAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).SetAddr(ctx, req.(*SetAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interact_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interact_AddRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interact_TransmitFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransmitFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).TransmitFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interact_TransmitFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).TransmitFile(ctx, req.(*TransmitFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interact_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interact_SetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).SetEnv(ctx, req.(*SetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interact_LoadKernelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadKernelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).LoadKernelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interact_LoadKernelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).LoadKernelInfo(ctx, req.(*LoadKernelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interact_ServiceDesc is the grpc.ServiceDesc for Interact service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interact_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Interact",
	HandlerType: (*InteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAddr",
			Handler:    _Interact_SetAddr_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Interact_AddRoute_Handler,
		},
		{
			MethodName: "TransmitFile",
			Handler:    _Interact_TransmitFile_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _Interact_SetEnv_Handler,
		},
		{
			MethodName: "LoadKernelInfo",
			Handler:    _Interact_LoadKernelInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/interact.proto",
}
